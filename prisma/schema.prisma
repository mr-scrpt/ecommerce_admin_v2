// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
}

enum DATATYPE {
  SELECT
  MULT
  CHECKBOX
  RADIO

}

model Category {
  id    String   @id @default(uuid())
  name  String
  slug  String   @unique
  board String[]

  productList Product[] @relation("ProductToCategory")
  optionList  Option[]  @relation("OptionToCategory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String     @id @default(uuid())
  name         String
  description  String
  about        String
  slug         String     @unique
  img          String[]

  categoryList Category[] @relation("ProductToCategory")
  optionItemListSelected OptionItem[] @relation("OptionItemSelectedToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Option {
  id       String       @id @default(uuid())
  name     String
  datatype DATATYPE

  optionItemList    OptionItem[] @relation("OptionItemToOption")
  categoryList Category[] @relation("OptionToCategory")

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model OptionItem {
  id    String @id @default(uuid())
  name  String
  value String

  option    Option   @relation("OptionItemToOption", fields: [optionId], references: [id], onDelete: Cascade)
  optionId  String

  productList Product[] @relation("OptionItemSelectedToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([optionId, name])
  @@index([optionId, name])
}

// model OptionItemSelected {
//   id           String   @id @default(uuid())
//   product      Product  @relation(fields: [productId], references: [id])
//   productId    String
//   optionItem   OptionItem @relation(fields: [optionItemId], references: [id])
//   optionItemId String
//
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//
//   @@unique([productId, optionItemId])
// }

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  role          ROLE      @default(USER)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
