// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
}

enum DATATYPE {
  SELECT
  MULT
  CHECKBOX
  RADIO
}

enum ORDER_STATUS {
  TEMP
  NEW
  PENDING
  CALLED
  NOT_CONTACTED
  COMPLETED
  CANCELED
}
enum ORDER_PAYMENT_STATUS {
  TEMP
  PAID
  NOT_PAID
  POSTAL_PAID
  CONTACT_PAID
}

enum DELIVERY_TYPE {
  PICKUP
  POST
  COURIER
}

model Category {
  id    String   @id @default(uuid())
  name  String
  slug  String   @unique
  board String[]

  productList Product[] @relation("ProductToCategory")
  propertyList  Property[]  @relation("PropertyToCategory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())

  name        String
  article     String
  price       Float
  inStock     Int
  slug        String   @unique

  description String
  about       String

  img         String[]

  categoryList   Category[]   @relation("ProductToCategory")
  propertyItemListSelected PropertyItem[] @relation("PropertyItemToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  phone         String
  role          ROLE      @default(USER)
  emailVerified DateTime?
  image         String?

  cart     Cart?
  orderList   Order[]
  receiverList  Receiver[]

  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime  @default(now())

}


model Cart {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  cartRowList  CartRow[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model CartRow {
  id        String   @id @default(uuid())
  cart	    Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String

  productId String

  quantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id        String   @id @default(uuid())
  orderNo   Int	     @default(autoincrement())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  orderStatus       ORDER_STATUS
  paymentStatus     ORDER_PAYMENT_STATUS

  orderRowList  OrderRow[]
  priceTotal  Float

  delivery      Delivery?

  receiver      Receiver? @relation(fields: [receiverId], references: [id])
  receiverId    String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id,userId])
}

model OrderRow {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  productName  String
  productImg  String

  productArticle  String
  quantity  Int

  price     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Receiver {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  name      String
  lastName  String
  phone     String
  orderList  Order[]

  @@unique([userId, name, lastName, phone])
}

// model DeliveryFieldOrder {
//   id        String   @id @default(uuid())
//   orderId   String
//   deliveryFieldId    String
//   value     String
// }

model Delivery {
  id          String   @id @default(uuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String   @unique
  deliveryType DELIVERY_TYPE
  city        String
  street      String?
  house       String?
  apartment   String?
  postOffice  String?
  pickupPoint String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Property {
  id       String   @id @default(uuid())
  name     String
  datatype DATATYPE

  propertyItemList PropertyItem[] @relation("PropertyItemToProperty")
  categoryList   Category[]   @relation("PropertyToCategory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyItem {
  id    String @id @default(uuid())
  name  String
  value String

  property      Property    @relation("PropertyItemToProperty", fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId    String
  productList Product[] @relation("PropertyItemToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([propertyId, name])
  @@index([propertyId, name])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
